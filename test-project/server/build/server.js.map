{
  "version": 3,
  "sources": ["../src/server.ts", "../../shared/src/protos/Error.ts", "../../shared/src/protos/RequestMoneyFromMentorResponse.ts", "../../shared/src/protos/Message.ts", "../../shared/src/protos/SynchronizedState.ts", "../../shared/src/protos/RequestMoneyFromMentor.ts", "../../shared/src/protos/Character.ts", "../../../@sanjo/game-engine/src/protos/Message.ts", "../../../@sanjo/game-engine/src/protos/Character.ts", "../../../@sanjo/game-engine/src/protos/Error.ts", "../../../@sanjo/game-engine/src/clientServerCommunication/messageFactories.ts", "../../shared/src/clientServerCommunication/messageFactories.ts", "../../shared/src/Character.ts"],
  "sourcesContent": ["import { WebSocketServer } from \"ws\"\r\nimport { Error as ErrorProto } from \"@sanjo/test-project-shared/protos/Error.js\"\r\nimport { RequestMoneyFromMentorResponse } from \"@sanjo/test-project-shared/protos/RequestMoneyFromMentorResponse.js\"\r\nimport type { SynchronizedState } from \"@sanjo/test-project-shared/protos/SynchronizedState.js\"\r\nimport { Message } from \"@sanjo/test-project-shared/protos/Message.js\"\r\nimport {\r\n  createCharacterMessage,\r\n  createError,\r\n} from \"@sanjo/game-engine/clientServerCommunication/messageFactories.js\"\r\nimport {\r\n  createRequestMoneyFromMentorResponse,\r\n  createSynchronizedState,\r\n} from \"@sanjo/test-project-shared/clientServerCommunication/messageFactories.js\"\r\nimport { Subject } from \"rxjs\"\r\nimport { Character } from \"@sanjo/test-project-shared/Character.js\"\r\nimport { ProjectMessageType } from \"@sanjo/test-project-shared/clientServerCommunication/MessageType.js\"\r\n\r\ninterface Socket {\r\n  send(data: any): void\r\n}\r\n\r\ninterface MessageFromSocket {\r\n  message: Message\r\n  socket: Socket\r\n}\r\n\r\nclass GameServer implements SynchronizedState {\r\n  money: number = 0\r\n  hasMentorGivenMoney: boolean = false\r\n  onConnect: Subject<{ socket: Socket }> = new Subject()\r\n  inStream: Subject<MessageFromSocket> = new Subject()\r\n  clients: Socket[] = []\r\n\r\n  constructor() {\r\n    this.onConnect.subscribe(({ socket }: { socket: Socket }) => {\r\n      const otherClients = Array.from(this.clients)\r\n      this.clients.push(socket)\r\n\r\n      const character = new Character()\r\n      character.x = 32\r\n      character.y = 6 * 32\r\n\r\n      this.sendCharacterToClients(character, otherClients)\r\n\r\n      socket.send(\r\n        Message.toBinary(\r\n          createSynchronizedState({\r\n            money: this.money,\r\n            hasMentorGivenMoney: this.hasMentorGivenMoney,\r\n          }),\r\n        ),\r\n      )\r\n    })\r\n\r\n    this.inStream.subscribe(({ message, socket }: MessageFromSocket) => {\r\n      if (\r\n        message.body.oneofKind === ProjectMessageType.RequestMoneyFromMentor\r\n      ) {\r\n        console.log(\"RequestMoneyFromMentor\", message)\r\n        try {\r\n          const updatedState = this.requestMoneyFromMentor()\r\n          socket.send(\r\n            Message.toBinary(\r\n              createRequestMoneyFromMentorResponse(\r\n                RequestMoneyFromMentorResponse.create(updatedState),\r\n              ),\r\n            ),\r\n          )\r\n        } catch (error: any) {\r\n          socket.send(\r\n            Message.toBinary(\r\n              createError(\r\n                ErrorProto.create({\r\n                  message: error.message,\r\n                }),\r\n              ),\r\n            ),\r\n          )\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  sendCharacterToClients(character: Character, clients: Socket[]) {\r\n    for (const client of clients) {\r\n      this.sendCharacterToClient(character, client)\r\n    }\r\n  }\r\n\r\n  sendCharacterToClient(character: Character, client: Socket) {\r\n    client.send(Message.toBinary(createCharacterMessage(character)))\r\n  }\r\n\r\n  requestMoneyFromMentor() {\r\n    if (this.hasMentorGivenMoney) {\r\n      throw new Error(\r\n        \"The mentor has already given money and only gives money once.\",\r\n      )\r\n    } else {\r\n      this.money += 50\r\n      this.hasMentorGivenMoney = true\r\n      return {\r\n        money: this.money,\r\n        hasMentorGivenMoney: this.hasMentorGivenMoney,\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass GameServerWithWebSocket extends GameServer {\r\n  listen() {\r\n    const webSocketServer = new WebSocketServer({ port: 8080 })\r\n\r\n    webSocketServer.on(\"connection\", (webSocket) => {\r\n      webSocket.on(\"error\", console.error)\r\n\r\n      webSocket.on(\"message\", (data: Buffer) => {\r\n        const message = Message.fromBinary(data)\r\n        this.inStream.next({ message, socket: webSocket })\r\n      })\r\n\r\n      this.onConnect.next({ socket: webSocket })\r\n    })\r\n  }\r\n}\r\n\r\nconst server = new GameServerWithWebSocket()\r\nserver.listen()\r\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"Error.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message Error\n */\nexport interface Error {\n    /**\n     * @generated from protobuf field: string message = 1;\n     */\n    message: string;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType<Error> {\n    constructor() {\n        super(\"Error\", [\n            { no: 1, name: \"message\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Error>): Error {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.message = \"\";\n        if (value !== undefined)\n            reflectionMergePartial<Error>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string message */ 1:\n                    message.message = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string message = 1; */\n        if (message.message !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.message);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message Error\n */\nexport const Error = new Error$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"RequestMoneyFromMentorResponse.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message RequestMoneyFromMentorResponse\n */\nexport interface RequestMoneyFromMentorResponse {\n    /**\n     * @generated from protobuf field: uint32 money = 1;\n     */\n    money: number;\n    /**\n     * @generated from protobuf field: bool hasMentorGivenMoney = 2;\n     */\n    hasMentorGivenMoney: boolean;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RequestMoneyFromMentorResponse$Type extends MessageType<RequestMoneyFromMentorResponse> {\n    constructor() {\n        super(\"RequestMoneyFromMentorResponse\", [\n            { no: 1, name: \"money\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"hasMentorGivenMoney\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RequestMoneyFromMentorResponse>): RequestMoneyFromMentorResponse {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.money = 0;\n        message.hasMentorGivenMoney = false;\n        if (value !== undefined)\n            reflectionMergePartial<RequestMoneyFromMentorResponse>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestMoneyFromMentorResponse): RequestMoneyFromMentorResponse {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint32 money */ 1:\n                    message.money = reader.uint32();\n                    break;\n                case /* bool hasMentorGivenMoney */ 2:\n                    message.hasMentorGivenMoney = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RequestMoneyFromMentorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint32 money = 1; */\n        if (message.money !== 0)\n            writer.tag(1, WireType.Varint).uint32(message.money);\n        /* bool hasMentorGivenMoney = 2; */\n        if (message.hasMentorGivenMoney !== false)\n            writer.tag(2, WireType.Varint).bool(message.hasMentorGivenMoney);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message RequestMoneyFromMentorResponse\n */\nexport const RequestMoneyFromMentorResponse = new RequestMoneyFromMentorResponse$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"Message.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { SynchronizedState } from \"./SynchronizedState\";\nimport { RequestMoneyFromMentorResponse } from \"./RequestMoneyFromMentorResponse\";\nimport { RequestMoneyFromMentor } from \"./RequestMoneyFromMentor\";\nimport { Character } from \"./Character\";\nimport { Error } from \"./Error\";\n/**\n * @generated from protobuf message Message\n */\nexport interface Message {\n    /**\n     * @generated from protobuf oneof: body\n     */\n    body: {\n        oneofKind: \"error\";\n        /**\n         * @generated from protobuf field: Error error = 1;\n         */\n        error: Error;\n    } | {\n        oneofKind: \"character\";\n        /**\n         * @generated from protobuf field: Character character = 2;\n         */\n        character: Character;\n    } | {\n        oneofKind: \"requestMoneyFromMentor\";\n        /**\n         * @generated from protobuf field: RequestMoneyFromMentor requestMoneyFromMentor = 1000;\n         */\n        requestMoneyFromMentor: RequestMoneyFromMentor;\n    } | {\n        oneofKind: \"requestMoneyFromMentorResponse\";\n        /**\n         * @generated from protobuf field: RequestMoneyFromMentorResponse requestMoneyFromMentorResponse = 1001;\n         */\n        requestMoneyFromMentorResponse: RequestMoneyFromMentorResponse;\n    } | {\n        oneofKind: \"synchronizedState\";\n        /**\n         * @generated from protobuf field: SynchronizedState synchronizedState = 1002;\n         */\n        synchronizedState: SynchronizedState;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Message$Type extends MessageType<Message> {\n    constructor() {\n        super(\"Message\", [\n            { no: 1, name: \"error\", kind: \"message\", oneof: \"body\", T: () => Error },\n            { no: 2, name: \"character\", kind: \"message\", oneof: \"body\", T: () => Character },\n            { no: 1000, name: \"requestMoneyFromMentor\", kind: \"message\", oneof: \"body\", T: () => RequestMoneyFromMentor },\n            { no: 1001, name: \"requestMoneyFromMentorResponse\", kind: \"message\", oneof: \"body\", T: () => RequestMoneyFromMentorResponse },\n            { no: 1002, name: \"synchronizedState\", kind: \"message\", oneof: \"body\", T: () => SynchronizedState }\n        ]);\n    }\n    create(value?: PartialMessage<Message>): Message {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.body = { oneofKind: undefined };\n        if (value !== undefined)\n            reflectionMergePartial<Message>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* Error error */ 1:\n                    message.body = {\n                        oneofKind: \"error\",\n                        error: Error.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).error)\n                    };\n                    break;\n                case /* Character character */ 2:\n                    message.body = {\n                        oneofKind: \"character\",\n                        character: Character.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).character)\n                    };\n                    break;\n                case /* RequestMoneyFromMentor requestMoneyFromMentor */ 1000:\n                    message.body = {\n                        oneofKind: \"requestMoneyFromMentor\",\n                        requestMoneyFromMentor: RequestMoneyFromMentor.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).requestMoneyFromMentor)\n                    };\n                    break;\n                case /* RequestMoneyFromMentorResponse requestMoneyFromMentorResponse */ 1001:\n                    message.body = {\n                        oneofKind: \"requestMoneyFromMentorResponse\",\n                        requestMoneyFromMentorResponse: RequestMoneyFromMentorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).requestMoneyFromMentorResponse)\n                    };\n                    break;\n                case /* SynchronizedState synchronizedState */ 1002:\n                    message.body = {\n                        oneofKind: \"synchronizedState\",\n                        synchronizedState: SynchronizedState.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).synchronizedState)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* Error error = 1; */\n        if (message.body.oneofKind === \"error\")\n            Error.internalBinaryWrite(message.body.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* Character character = 2; */\n        if (message.body.oneofKind === \"character\")\n            Character.internalBinaryWrite(message.body.character, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* RequestMoneyFromMentor requestMoneyFromMentor = 1000; */\n        if (message.body.oneofKind === \"requestMoneyFromMentor\")\n            RequestMoneyFromMentor.internalBinaryWrite(message.body.requestMoneyFromMentor, writer.tag(1000, WireType.LengthDelimited).fork(), options).join();\n        /* RequestMoneyFromMentorResponse requestMoneyFromMentorResponse = 1001; */\n        if (message.body.oneofKind === \"requestMoneyFromMentorResponse\")\n            RequestMoneyFromMentorResponse.internalBinaryWrite(message.body.requestMoneyFromMentorResponse, writer.tag(1001, WireType.LengthDelimited).fork(), options).join();\n        /* SynchronizedState synchronizedState = 1002; */\n        if (message.body.oneofKind === \"synchronizedState\")\n            SynchronizedState.internalBinaryWrite(message.body.synchronizedState, writer.tag(1002, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message Message\n */\nexport const Message = new Message$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"SynchronizedState.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message SynchronizedState\n */\nexport interface SynchronizedState {\n    /**\n     * @generated from protobuf field: uint32 money = 1;\n     */\n    money: number;\n    /**\n     * @generated from protobuf field: bool hasMentorGivenMoney = 2;\n     */\n    hasMentorGivenMoney: boolean;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SynchronizedState$Type extends MessageType<SynchronizedState> {\n    constructor() {\n        super(\"SynchronizedState\", [\n            { no: 1, name: \"money\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"hasMentorGivenMoney\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SynchronizedState>): SynchronizedState {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.money = 0;\n        message.hasMentorGivenMoney = false;\n        if (value !== undefined)\n            reflectionMergePartial<SynchronizedState>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SynchronizedState): SynchronizedState {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint32 money */ 1:\n                    message.money = reader.uint32();\n                    break;\n                case /* bool hasMentorGivenMoney */ 2:\n                    message.hasMentorGivenMoney = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SynchronizedState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint32 money = 1; */\n        if (message.money !== 0)\n            writer.tag(1, WireType.Varint).uint32(message.money);\n        /* bool hasMentorGivenMoney = 2; */\n        if (message.hasMentorGivenMoney !== false)\n            writer.tag(2, WireType.Varint).bool(message.hasMentorGivenMoney);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message SynchronizedState\n */\nexport const SynchronizedState = new SynchronizedState$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"RequestMoneyFromMentor.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message RequestMoneyFromMentor\n */\nexport interface RequestMoneyFromMentor {\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RequestMoneyFromMentor$Type extends MessageType<RequestMoneyFromMentor> {\n    constructor() {\n        super(\"RequestMoneyFromMentor\", []);\n    }\n    create(value?: PartialMessage<RequestMoneyFromMentor>): RequestMoneyFromMentor {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        if (value !== undefined)\n            reflectionMergePartial<RequestMoneyFromMentor>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestMoneyFromMentor): RequestMoneyFromMentor {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RequestMoneyFromMentor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message RequestMoneyFromMentor\n */\nexport const RequestMoneyFromMentor = new RequestMoneyFromMentor$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"Character.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message Character\n */\nexport interface Character {\n    /**\n     * @generated from protobuf field: uint32 x = 1;\n     */\n    x: number;\n    /**\n     * @generated from protobuf field: uint32 y = 2;\n     */\n    y: number;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Character$Type extends MessageType<Character> {\n    constructor() {\n        super(\"Character\", [\n            { no: 1, name: \"x\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"y\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Character>): Character {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.x = 0;\n        message.y = 0;\n        if (value !== undefined)\n            reflectionMergePartial<Character>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Character): Character {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint32 x */ 1:\n                    message.x = reader.uint32();\n                    break;\n                case /* uint32 y */ 2:\n                    message.y = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Character, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint32 x = 1; */\n        if (message.x !== 0)\n            writer.tag(1, WireType.Varint).uint32(message.x);\n        /* uint32 y = 2; */\n        if (message.y !== 0)\n            writer.tag(2, WireType.Varint).uint32(message.y);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message Character\n */\nexport const Character = new Character$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"Message.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Character } from \"./Character\";\nimport { Error } from \"./Error\";\n/**\n * @generated from protobuf message Message\n */\nexport interface Message {\n    /**\n     * @generated from protobuf oneof: body\n     */\n    body: {\n        oneofKind: \"error\";\n        /**\n         * @generated from protobuf field: Error error = 1;\n         */\n        error: Error;\n    } | {\n        oneofKind: \"character\";\n        /**\n         * @generated from protobuf field: Character character = 2;\n         */\n        character: Character;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Message$Type extends MessageType<Message> {\n    constructor() {\n        super(\"Message\", [\n            { no: 1, name: \"error\", kind: \"message\", oneof: \"body\", T: () => Error },\n            { no: 2, name: \"character\", kind: \"message\", oneof: \"body\", T: () => Character }\n        ]);\n    }\n    create(value?: PartialMessage<Message>): Message {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.body = { oneofKind: undefined };\n        if (value !== undefined)\n            reflectionMergePartial<Message>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* Error error */ 1:\n                    message.body = {\n                        oneofKind: \"error\",\n                        error: Error.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).error)\n                    };\n                    break;\n                case /* Character character */ 2:\n                    message.body = {\n                        oneofKind: \"character\",\n                        character: Character.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).character)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* Error error = 1; */\n        if (message.body.oneofKind === \"error\")\n            Error.internalBinaryWrite(message.body.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* Character character = 2; */\n        if (message.body.oneofKind === \"character\")\n            Character.internalBinaryWrite(message.body.character, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message Message\n */\nexport const Message = new Message$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"Character.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message Character\n */\nexport interface Character {\n    /**\n     * @generated from protobuf field: uint32 x = 1;\n     */\n    x: number;\n    /**\n     * @generated from protobuf field: uint32 y = 2;\n     */\n    y: number;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Character$Type extends MessageType<Character> {\n    constructor() {\n        super(\"Character\", [\n            { no: 1, name: \"x\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"y\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Character>): Character {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.x = 0;\n        message.y = 0;\n        if (value !== undefined)\n            reflectionMergePartial<Character>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Character): Character {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint32 x */ 1:\n                    message.x = reader.uint32();\n                    break;\n                case /* uint32 y */ 2:\n                    message.y = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Character, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint32 x = 1; */\n        if (message.x !== 0)\n            writer.tag(1, WireType.Varint).uint32(message.x);\n        /* uint32 y = 2; */\n        if (message.y !== 0)\n            writer.tag(2, WireType.Varint).uint32(message.y);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message Character\n */\nexport const Character = new Character$Type();\n", "// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies\n// @generated from protobuf file \"Error.proto\" (syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message Error\n */\nexport interface Error {\n    /**\n     * @generated from protobuf field: string message = 1;\n     */\n    message: string;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType<Error> {\n    constructor() {\n        super(\"Error\", [\n            { no: 1, name: \"message\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Error>): Error {\n        const message = globalThis.Object.create((this.messagePrototype!));\n        message.message = \"\";\n        if (value !== undefined)\n            reflectionMergePartial<Error>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string message */ 1:\n                    message.message = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string message = 1; */\n        if (message.message !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.message);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message Error\n */\nexport const Error = new Error$Type();\n", "import { Message } from \"../protos/Message.js\"\r\nimport type { Error as ErrorProto } from \"../protos/Error.js\"\r\nimport { MessageType } from \"./MessageType.js\"\r\nimport type { Character } from \"../protos/Character.js\"\r\n\r\nexport function createError(error: ErrorProto): Message {\r\n  return Message.create({\r\n    body: {\r\n      oneofKind: MessageType.Error,\r\n      error,\r\n    },\r\n  })\r\n}\r\n\r\nexport function createCharacterMessage(character: Character): Message {\r\n  return Message.create({\r\n    body: {\r\n      oneofKind: MessageType.Character,\r\n      character,\r\n    },\r\n  })\r\n}\r\n", "import { Message } from \"../protos/Message.js\"\r\nimport { ProjectMessageType } from \"./MessageType.js\"\r\nimport type { RequestMoneyFromMentorResponse } from \"../protos/RequestMoneyFromMentorResponse.js\"\r\nimport type { SynchronizedState } from \"../protos/SynchronizedState.js\"\r\nimport { RequestMoneyFromMentor } from \"../protos/RequestMoneyFromMentor.js\"\r\n\r\nexport function createRequestMoneyFromMentor(): Message {\r\n  return Message.create({\r\n    body: {\r\n      oneofKind: ProjectMessageType.RequestMoneyFromMentor,\r\n      requestMoneyFromMentor: RequestMoneyFromMentor.create(),\r\n    },\r\n  })\r\n}\r\n\r\nexport function createRequestMoneyFromMentorResponse(\r\n  requestMoneyFromMentorResponse: RequestMoneyFromMentorResponse,\r\n): Message {\r\n  return Message.create({\r\n    body: {\r\n      oneofKind: ProjectMessageType.RequestMoneyFromMentorResponse,\r\n      requestMoneyFromMentorResponse,\r\n    },\r\n  })\r\n}\r\n\r\nexport function createSynchronizedState(\r\n  synchronizedState: SynchronizedState,\r\n): Message {\r\n  return Message.create({\r\n    body: {\r\n      oneofKind: ProjectMessageType.SynchronizedState,\r\n      synchronizedState,\r\n    },\r\n  })\r\n}\r\n", "export class Character {\r\n  x: number = 0\r\n  y: number = 0\r\n}\r\n"],
  "mappings": "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",
  "names": ["Error", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "MessageType", "Error", "reflectionMergePartial", "UnknownFieldHandler", "WireType", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "Character$Type", "Character", "WireType", "UnknownFieldHandler", "reflectionMergePartial", "MessageType", "Error$Type", "Error", "Message$Type", "MessageType", "Error", "Character", "reflectionMergePartial", "UnknownFieldHandler", "WireType", "Message", "Message", "Character", "Character", "Error"]
}
