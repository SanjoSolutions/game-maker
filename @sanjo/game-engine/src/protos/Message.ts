// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Message.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime"
import type { IBinaryWriter } from "@protobuf-ts/runtime"
import { WireType } from "@protobuf-ts/runtime"
import type { BinaryReadOptions } from "@protobuf-ts/runtime"
import type { IBinaryReader } from "@protobuf-ts/runtime"
import { UnknownFieldHandler } from "@protobuf-ts/runtime"
import type { PartialMessage } from "@protobuf-ts/runtime"
import { reflectionMergePartial } from "@protobuf-ts/runtime"
import { MessageType } from "@protobuf-ts/runtime"
import { Character } from "./Character"
import { SynchronizedState } from "../../../../test-project/shared/protos/SynchronizedState.js"
import { Error } from "./Error"
import { RequestMoneyFromMentorResponse } from "../../../../test-project/shared/protos/RequestMoneyFromMentorResponse.js"
import { RequestMoneyFromMentor } from "../../../../test-project/shared/protos/RequestMoneyFromMentor.js"
/**
 * @generated from protobuf message Message
 */
export interface Message {
  /**
   * @generated from protobuf oneof: body
   */
  body:
    | {
        oneofKind: "requestMoneyFromMentor"
        /**
         * @generated from protobuf field: RequestMoneyFromMentor requestMoneyFromMentor = 1;
         */
        requestMoneyFromMentor: RequestMoneyFromMentor
      }
    | {
        oneofKind: "requestMoneyFromMentorResponse"
        /**
         * @generated from protobuf field: RequestMoneyFromMentorResponse requestMoneyFromMentorResponse = 2;
         */
        requestMoneyFromMentorResponse: RequestMoneyFromMentorResponse
      }
    | {
        oneofKind: "error"
        /**
         * @generated from protobuf field: Error error = 3;
         */
        error: Error
      }
    | {
        oneofKind: "synchronizedState"
        /**
         * @generated from protobuf field: SynchronizedState synchronizedState = 4;
         */
        synchronizedState: SynchronizedState
      }
    | {
        oneofKind: "character"
        /**
         * @generated from protobuf field: Character character = 5;
         */
        character: Character
      }
    | {
        oneofKind: undefined
      }
}
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
  constructor() {
    super("Message", [
      {
        no: 1,
        name: "requestMoneyFromMentor",
        kind: "message",
        oneof: "body",
        T: () => RequestMoneyFromMentor,
      },
      {
        no: 2,
        name: "requestMoneyFromMentorResponse",
        kind: "message",
        oneof: "body",
        T: () => RequestMoneyFromMentorResponse,
      },
      { no: 3, name: "error", kind: "message", oneof: "body", T: () => Error },
      {
        no: 4,
        name: "synchronizedState",
        kind: "message",
        oneof: "body",
        T: () => SynchronizedState,
      },
      {
        no: 5,
        name: "character",
        kind: "message",
        oneof: "body",
        T: () => Character,
      },
    ])
  }
  create(value?: PartialMessage<Message>): Message {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.body = { oneofKind: undefined }
    if (value !== undefined)
      reflectionMergePartial<Message>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Message,
  ): Message {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* RequestMoneyFromMentor requestMoneyFromMentor */ 1:
          message.body = {
            oneofKind: "requestMoneyFromMentor",
            requestMoneyFromMentor: RequestMoneyFromMentor.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.body as any).requestMoneyFromMentor,
            ),
          }
          break
        case /* RequestMoneyFromMentorResponse requestMoneyFromMentorResponse */ 2:
          message.body = {
            oneofKind: "requestMoneyFromMentorResponse",
            requestMoneyFromMentorResponse:
              RequestMoneyFromMentorResponse.internalBinaryRead(
                reader,
                reader.uint32(),
                options,
                (message.body as any).requestMoneyFromMentorResponse,
              ),
          }
          break
        case /* Error error */ 3:
          message.body = {
            oneofKind: "error",
            error: Error.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.body as any).error,
            ),
          }
          break
        case /* SynchronizedState synchronizedState */ 4:
          message.body = {
            oneofKind: "synchronizedState",
            synchronizedState: SynchronizedState.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.body as any).synchronizedState,
            ),
          }
          break
        case /* Character character */ 5:
          message.body = {
            oneofKind: "character",
            character: Character.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.body as any).character,
            ),
          }
          break
        default:
          let u = options.readUnknownField
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Message,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* RequestMoneyFromMentor requestMoneyFromMentor = 1; */
    if (message.body.oneofKind === "requestMoneyFromMentor")
      RequestMoneyFromMentor.internalBinaryWrite(
        message.body.requestMoneyFromMentor,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* RequestMoneyFromMentorResponse requestMoneyFromMentorResponse = 2; */
    if (message.body.oneofKind === "requestMoneyFromMentorResponse")
      RequestMoneyFromMentorResponse.internalBinaryWrite(
        message.body.requestMoneyFromMentorResponse,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* Error error = 3; */
    if (message.body.oneofKind === "error")
      Error.internalBinaryWrite(
        message.body.error,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* SynchronizedState synchronizedState = 4; */
    if (message.body.oneofKind === "synchronizedState")
      SynchronizedState.internalBinaryWrite(
        message.body.synchronizedState,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* Character character = 5; */
    if (message.body.oneofKind === "character")
      Character.internalBinaryWrite(
        message.body.character,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf message Message
 */
export const Message = new Message$Type()
